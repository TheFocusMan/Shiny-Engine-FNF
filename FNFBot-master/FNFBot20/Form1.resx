<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAJAAAALQAAACQAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAANAAAAUAAAAF8AAAAmAAAAAAAAABwAAAAwAAAAEQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAACA0NDYhHR0frMjIy3gAAAE0DAwMAAAAAAAAAAAAAAAAAAAAAAAAA
        AAICAgJTCAgIkgEBAUMEBAQAAAAABwwMDIpiYmL5fn5+/xsbG7gAAABIKysrzUxMTO8SEhKjAAAADQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2S0tL7e/v7/+vr6//DQ0Nlf///wAAAAAAAAAAAAAA
        AAAAAAAAAAAALzo6OuOWlpb/IyMjvgAAAAkAAABRV1dX8vLy8v/29vb/R0dH7AYGBs2srKz/8vLy/0xM
        TOoAAAAuAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBAAAAAF18fHz9/////8jIyP8cHBybAAAAAQAA
        AAAAAAAAAAAAAAICAgAAAABdfn5+/fHx8f9AQEDgAAAANx4eHsHDw8P///////v7+/9VVVXzHR0d6t7e
        3v//////Z2dn7gAAADQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBgYAAAAAY5OTk/7/////w8PD/xgY
        GJsAAAABAAAAAAAAAAAAAAAACQkJAAEBAXKZmZn/+fn5/0lJSecAAACTdHR0+Pz8/P//////+/v7/1hY
        WPMvLy/q6urq//39/f9gYGDuAAAAMwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoKCgACAgJom5ub////
        //+4uLj/DQ0NmwAAAAEAAAABAAAAAAAAAAApKSkABgYGj6ioqP/+/v7/SEhI+SEhIfHW1tb/////////
        ///7+/v/UFBQ/DU1Nfnw8PD/+vr6/1FRUe0AAAAzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBgYAAQE
        BIejo6P//////7S0tP8TExPVExMTmxEREZkCAgJrAAAAFZqamgAJCQmatLS0//////9RUVH/hoaG////
        //////////////r6+v9FRUX/Ojo6//T09P/39/f/T09P9QwMDKsUFBSbCQkJiwAAADQAAAABAAAAAAAA
        AAAjIyMABQUFjaampv//////7e3t/8PDw/+/v7//u7u7/3BwcP4ODg6VAAAABBEREZu8vLz//////7Gx
        sf/o6Oj//v7+/9vb2//8/Pz/+vr6/0VFRf86Ojr/9PT0//7+/v/U1NT/vr6+/8DAwP+hoaH/NjY23gAA
        ADYBAQEAAAAAACIiIgAFBQWMpqam////////////////////////////2tra/ysrK8cAAAAQFxcXmsPD
        w////////v7+///////a2tr/fHx8//r6+v/39/f/Pz8//zo6Ov/09PT/////////////////////////
        //98fHz9AAAAXgMDAwAAAAAAIiIiAAUFBYympqb//////+rq6v+3t7f/r6+v/5ubm/9VVVX1CQkJfQAA
        AAMdHR2bycnJ/////////////////39/f/9JSUn/+/v7//T09P86Ojr/Ojo6//T09P/+/v7/y8vL/7Ky
        sv+oqKj/f39//ygoKMwAAAAqAAAAAAAAAAAhISEABQUFjKampv//////tbW1/wwMDNIHBweSAwMDfQAA
        AEIAAAAHAAAAAB0dHZvJycn////////////W1tb/ISEh8EdHR/f5+fn/9PT0/zo6Ov88PDz/9fX1//j4
        +P9MTEz1AQEBpgUFBYoBAQFkAAAAHwAAAAAAAAAAAAAAAFhYWAAHBweSrKys//////+pqan/BQUFtwAA
        AGMBAQFiAgICYQAAAGQAAABKGxsbpcnJyf///////Pz8/3JycvkAAACTRUVF5fPz8//09PT/Ojo6/0RE
        RP/6+vr/8vLy/0FBQe8AAAB6AAAAYgICAmABAQFiAAAAXwAAACcAAAAAAAAABA4ODqW6urr//////+Dg
        4P+VlZX+kZGR/pqamv6bm5v+k5OT/ldXV/QSEhLrwsLC//////+3t7f/GhoauwAAACw6OjrV6+vr/+zs
        7P8tLS36U1NT/Pz8/P/6+vr/sLCw/46Ojv6Xl5f+m5ub/pqamv5+fn7/KCgozAAAACkAAAARLi4ux97e
        3v//////////////////////////////////////09PT/xgYGPx6enr9uLi4/zg4OOEAAAA7AAAABhgY
        GLG0tLT/paWl/gsLC/GIiIj9//////////////////////////////////////////9sbGz4AAAAUgAA
        AAsZGRmzmpqa/83Nzf/T09P/zs7O/8jIyP/CwsL/t7e3/6ampv9qamr9CQkJoQ0NDZETExOwAQEBSwAA
        AAECAgIAAAAAOiIiIsgcHBy2AAAAfFdXV/TExMT/0NDQ/9LS0v/Kysr/xsbG/7y8vP+wsLD/k5OT/zIy
        Mt0AAAAxAQEBAAAAADMODg6QHR0dqiEhIbceHh6yHBwcnRcXF5sMDAybBAQEjAAAAF0AAAAWAAAAAgAA
        AAYAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAA0AAAALBQUFbxcXF6AfHx+zICAgthwcHKcaGhqaERERmwgI
        CJcCAgJ3AAAAOAAAAAMAAAAAAAAAAAAAAAAAAAADAAAABQAAAAQAAAABAAAAAQAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAUAAAAFAAAAAwAA
        AAEAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////////////////////////////////////D/4R/g+EAP4Pg
        AD+B4AA/geAAP4DgAD+AIAADgAAAA4AAAAOAAAADgCAAB4AAAAEAAAAAAAAAAAAAgACAA8AA4H/8D///
        //////////////////////////////////8=
</value>
  </data>
</root>